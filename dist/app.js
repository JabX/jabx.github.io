(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var React = require('react/addons');
var Reflux = require('reflux');
var Swipe = require('react-swipe');

var TopBar = require('./top-bar.jsx');
var SlidePage = require('./slide-page.jsx');
var ChatPage = require('./chat-page.jsx');

var Slides = require('./slides');

var App = React.createClass({displayName: "App",
    mixins: [Reflux.connect(Slides.Store, "slides")],

    getInitialState: function() {
        return {
            slides: Slides.Store.slides,
            currentSlide: 1
        };
    },

    changeSlide: function(slide) {
        this.setState({ currentSlide: slide });
    },

    toChat: function() {
        this.refs.carousel.next();
    },

    toSlide: function() {
        this.refs.carousel.prev();
    },

    render: function() {
        return (
            React.createElement("div", {className: "app"}, 
                React.createElement(TopBar, {currentSlide: this.state.currentSlide, onClick: this.changeSlide}), 
                React.createElement(Swipe, {ref: "carousel", className: "main", edgeFlick: false}, 
                    React.createElement(SlidePage, {slides: this.state.slides, currentSlide: this.state.currentSlide, toChat: this.toChat}), 
                    React.createElement(ChatPage, {slides: this.state.slides, currentSlide: this.state.currentSlide, toSlide: this.toSlide})
                )
            )
        );
    }
});

React.render(React.createElement(App, null), document.body);

},{"./chat-page.jsx":2,"./slide-page.jsx":3,"./slides":4,"./top-bar.jsx":5,"react-swipe":"react-swipe","react/addons":"react/addons","reflux":"reflux"}],2:[function(require,module,exports){
var React = require('react/addons');
var TransitionGroup = React.addons.CSSTransitionGroup;

var Slides = require('./slides');

var Message = React.createClass({displayName: "Message",
    mixins:[React.addons.PureRenderMixin],

    render: function() {
        var sender = this.props.message.sender;
        var date = this.props.message.time.toLocaleString('en-US');
        var content = this.props.message.content;
        return (
            React.createElement("div", {className: "message"}, 
                React.createElement("h4", null, sender, " at ", date), 
                React.createElement("p", null, content)
            )
        );
    }
});

module.exports = React.createClass({displayName: "exports",
    getInitialState: function() {
        return {
            slideTransition: "slideLeft",
            newMessage: ""
        }
    },

    componentWillReceiveProps: function(nextProps) {
        if(nextProps.currentSlide > this.props.currentSlide)
            this.setState({slideTransition: "slideLeft"});
        else
            this.setState({slideTransition: "slideRight"});
    },

    handleMessage: function(e) {
        this.setState({newMessage: e.target.value});
    },

    sendMessage: function() {
        Slides.Actions.PostMessage(this.props.currentSlide - 1, this.state.newMessage);
        this.setState({newMessage: ""});
    },

    render: function() {
        var currentSlide = this.props.currentSlide - 1;
        var slides = this.props.slides;
        var slide = slides[currentSlide];

        var messages;
        if (slide.messages.length > 0)
            messages = slide.messages.map(function(message, i) {
                return React.createElement(Message, {key: i, message: message});
            });
        else
            messages = React.createElement("div", {style: {margin: "20px"}}, "No messages yet on this slide")

        return (
            React.createElement("div", {className: "chat-page", style: this.props.style}, 
                React.createElement(TransitionGroup, {className: "message-container", component: "div", transitionName: this.state.slideTransition}, 
                    React.createElement(TransitionGroup, {key: currentSlide, transitionName: "messageAppear", component: "div", style: {height: 'calc(100% - 10px)'}, transitionLeave: false}, 
                        messages
                    )
                ), 
                React.createElement("button", {className: "button-to-slide", onClick: this.props.toSlide}, React.createElement("img", {src: "img/slideButton.svg"})), 
                React.createElement("textarea", {value: this.state.newMessage, onChange: this.handleMessage}), 
                React.createElement("button", {onClick: this.sendMessage}, "Send")
            )
        );
    }
});

},{"./slides":4,"react/addons":"react/addons"}],3:[function(require,module,exports){
var React = require('react/addons');
var TransitionGroup = React.addons.CSSTransitionGroup;

module.exports = React.createClass({displayName: "exports",
    mixins:[React.addons.PureRenderMixin],

    getInitialState: function() {
        return {
            slideTransition: "slideLeft"
        }
    },

    componentWillReceiveProps: function(nextProps) {
        if(nextProps.currentSlide > this.props.currentSlide)
            this.setState({slideTransition: "slideLeft"});
        else
            this.setState({slideTransition: "slideRight"});
    },

    render: function() {
        var currentSlide = this.props.currentSlide - 1;
        var slides = this.props.slides;
        var slide = slides[currentSlide];

        return (
            React.createElement(TransitionGroup, {style: this.props.style, className: "slide-container", component: "div", transitionName: this.state.slideTransition}, 
                React.createElement("div", {key: currentSlide, className: "slide"}, 
                    React.createElement("h2", null, slide.title), 
                    React.createElement("img", {src: slide.picture}), 
                    slide.text.map(function(point, i) {
                        if(point[0] == " ")
                            return React.createElement("h4", {key: i}, "- ", point);
                        else
                            return React.createElement("h3", {key: i}, "- ", point);
                    })
                ), 
                React.createElement("button", {className: "button-to-chat", onClick: this.props.toChat}, React.createElement("img", {src: "img/chatButton.svg"}))
            )
        )
    }
});

},{"react/addons":"react/addons"}],4:[function(require,module,exports){
var Reflux = require('reflux');

var Actions = Reflux.createActions([
    'PostMessage'
]);

var Store = Reflux.createStore({
    listenables: [Actions],

    slides: [
        {
            title: "First Slide",
            picture: "img/slide1.jpg",
            text: [
                "Bullet Point 1",
                "Bullet Point 2",
                "   Bullet Point 2.1",
                "   Bullet Point 2.2",
                "Bullet Point 3"
            ],
            messages: [
                {
                    sender: "John Smith",
                    time: new Date(2015, 2, 2, 8, 23, 0, 0),
                    content: "Hello guys, anything to say on the first slide?"
                },
                {
                    sender: "Jane Porter",
                    time: new Date(2015, 2, 2, 8, 31, 0, 0),
                    content: "Well indeed, I'm not sure I got what the presenter said about point 2.2, can you help me?"
                }
            ]
        },
        {
            title: "Second Slide",
            picture: "img/slide2.jpg",
            text: [
                "Bullet Point 1",
                "Bullet Point 2",
                "   Bullet Point 2.1",
                "   Bullet Point 2.2",
                "Bullet Point 3",
                "   Bullet Point 3.1",
                "   Bullet Point 3.2",
                "   Bullet Point 3.3",
                "   Bullet Point 3.4",
                "Bullet Point 4",
                "Bullet Point 5",
                "Bullet Point 6",
                "   Bullet Point 6.1"
            ],
            messages: [
                {
                    sender: "Jane Porter",
                    time: new Date(2015, 2, 2, 8, 43, 0, 0),
                    content: "Wow, this slide is just horrible, there's too much information on it I can't figure out what I should really remember on that"
                },
                {
                    sender: "Chris Jack",
                    time: new Date(2015, 2, 2, 8, 46, 0, 0),
                    content: "I feel your pain, but from what I got I feel like everything is important on there"
                },
                {
                    sender: "John Smith",
                    time: new Date(2015, 2, 2, 9, 11, 0, 0),
                    content: "Oh really, the most important point is the second one, the rest is just detail. I agree the presenter should have made it clearer though."
                }
            ]
        },
        {
            title: "Third Slide",
            picture: "img/slide3.jpg",
            text: [
                "Bullet Point 1",
                "   Bullet Point 1.1",
                "   Bullet Point 1.2",
                "   Bullet Point 1.3",
                "Bullet Point 2",
                "   Bullet Point 2.1"
            ],
            messages: [

            ]
        }
    ],

    onPostMessage: function(slideId, message) {
        if(message != "") {
            this.slides[slideId].messages = this.slides[slideId].messages.concat({
                sender: "Me",
                time: new Date(Date.now()),
                content: message
            });

            this.trigger(this.slides);
        }
    }
});

module.exports = {Actions: Actions, Store: Store};


},{"reflux":"reflux"}],5:[function(require,module,exports){
var React = require('react/addons');

module.exports = React.createClass({displayName: "exports",
    getDefaultProps: function() {
        return {
            currentSlide: 1
        };
    },

    render: function() {
        var id = this.props.currentSlide;
        return (
          React.createElement("div", {className: "top-bar"}, 
              React.createElement("button", {className: "button-first", onClick: this.props.onClick.bind(null, 1)}, "1"), 
              React.createElement("button", {className: "button-back", onClick: this.props.onClick.bind(null, Math.max(1, id - 1))}), 
              React.createElement("button", {className: "button-middle"}, this.props.currentSlide), 
              React.createElement("button", {className: "button-next", onClick: this.props.onClick.bind(null, Math.min(3, id + 1))}), 
              React.createElement("button", {className: "button-last", onClick: this.props.onClick.bind(null, 3)}, "3")
          )
        );
    }
});

},{"react/addons":"react/addons"}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
